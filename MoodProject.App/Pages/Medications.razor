@page "/Medications"

@attribute [Authorize]

@using MoodProject.Core.Models
@using MoodProject.Core.Enums
@using MoodProject.Core.Ports.In
@using Microsoft.AspNetCore.Components
@using MoodProject.App.Converters
@using MoodProject.App.Models
@using MoodProject.App.Services
@inject IMedicationService MedicationService
@inject JsService JsService
@inject NotificationClient NotificationClient
@inject IJSRuntime JsRuntime

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

<h1 class="display-1">Vos médicaments</h1>
<div class="my-3">
    <div class="card">
        <div class="card-header">Médicaments enregistrés</div>
        <div class="card-body">
            @if (MedicationOperation.Status == OperationResultType.Pending)
            {
                <LoadingText/>
            }
            else
            {
                if (MedicationOperation.Content.Any())
                {
                    @if (SubmitMedicationFormOperation.Status == OperationResultType.Ok)
                    {
                        <SuccessMessage Text="@SubmitMedicationFormOperation.Message" />
                    }
                    @if (DeleteMedicationOperation.Status == OperationResultType.Ok)
                    {
                        <SuccessMessage Text="@DeleteMedicationOperation.Message" />
                    }
                    <div class="card-title">Vous pouvez cliquer sur le nom d'un médicament afin de le modifier</div>
                    <ul class="list-group list-group-flush medication-list">
                        @foreach (var medication in MedicationOperation.Content)
                        {
                            <li class="list-group-item medication-item" @onclick="() => LoadMedicationDataIntoModal(medication)" data-bs-toggle="modal" data-bs-target="#medicationModal">
                                @medication.Name
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <InfoMessage Text="Vous n'avez encore enregistré aucun médicament."/>
                }
                <Modal
                    Id="medicationModal"
                    Title="Modification du médicament"
                    PrimaryButtonText="Confirmer"
                    SecondaryButtonText="Annuler"
                    DangerButtonText="Supprimer"
                    OnPrimaryButtonClick="@(async () => await SubmitMedicationForm())"
                    OnDangerButtonClick="@(async () => await DeleteMedication())">
                    @if (SubmitMedicationFormOperation.Status == OperationResultType.Error)
                    {
                        <ErrorMessage Text="@SubmitMedicationFormOperation.Message"/>
                    }
                    @if (DeleteMedicationOperation.Status == OperationResultType.Error)
                    {
                        <ErrorMessage Text="@SubmitMedicationFormOperation.Message"/>
                    }
                    <EditForm Model="@MedicationForm" OnSubmit="SubmitMedicationForm">
                        <div class="form-group">
                            <label>Nom</label>
                            <InputText @bind-Value="@MedicationForm.Name" DisplayName="@MedicationForm.Name" placeholder="Nom du médicament" class="form-control"/>
                            <label>Type de prise</label>
                            <InputSelect @bind-Value="@MedicationForm.Usage" placeholder="Utilisation" class="form-control">
                                @foreach (var usage in MedicationForm.UsageDictionnary)
                                {
                                    <option value="@usage.Key">@usage.Value</option>
                                }
                            </InputSelect>
                            @if (MedicationForm.Usage == MedicationUsage.PER_DAY)
                            {
                                <label>Combien de fois par jour prennez-vous ce médicament ?</label>
                                <input type="number" min="1" max="10" @bind-value="@MedicationForm.UsagePerDay" @onchange="@MedicationForm.UpdateListLength" @bind-value:event="oninput" class="form-control"/>
                                if (MedicationForm.UsagePerDay > 0)
                                {
                                    <label>A quelle heure prenez-vous ce médicament ?</label>
                                    @foreach (var dayUsage in MedicationForm.FormDayUsages)
                                    {
                                        <InputDate Type="InputDateType.Time" @bind-Value:format="hh:mm:ss" @bind-Value="@dayUsage.Time" class="form-control dayUsageTimePicker"/>
                                    }
                                }
                                <InputCheckbox @bind-Value="@MedicationForm.AreNotificationsEnabled" />
                                <label class="form-check-label">Recevoir des notifications pour ce médicament</label>
                            }
                            @if (MedicationForm.Usage == MedicationUsage.PER_MONTH)
                            {
                                <label>Combien de fois par mois prennez-vous ce médicament ?</label>
                                <InputSelect @bind-Value="@MedicationForm.MonthUsage" placeholder="Utilisation" class="form-control">
                                    @foreach (var usage in MedicationForm.MonthUsageDictionnary)
                                    {
                                        <option value="@usage.Key">@usage.Value</option>
                                    }
                                </InputSelect>
                            }
                        </div>
                    </EditForm>
                </Modal>
            }
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#medicationModal" @onclick="LoadNewMedicationIntoModal">Ajouter un médicament</button>
        </div>
    </div>
</div>

@code {
    private OperationResult<IEnumerable<Medication>> MedicationOperation = new(OperationResultType.Pending);
    private OperationResult<Medication> SubmitMedicationFormOperation = new(OperationResultType.WaitingForUser);
    private OperationResult<Medication> DeleteMedicationOperation = new(OperationResultType.WaitingForUser);
    private MedicationForm MedicationForm = new();

    protected override async Task OnInitializedAsync()
    {
        await ReloadMedications();
    }

    private async Task SubmitMedicationForm()
    {
        var medication = MedicationFormConverter.ConvertFormToModel(MedicationForm, await GetUserId());
        SubmitMedicationFormOperation = await MedicationService.UpdateMedication(medication);
        if (SubmitMedicationFormOperation.Status == OperationResultType.Ok)
        {
            await JsService.Execute("BootstrapManager.closeModal", "#medicationModal");
            await ReloadMedications();
        }
    }

    private async Task ReloadMedications()
    {
        MedicationOperation = new OperationResult<IEnumerable<Medication>>(OperationResultType.Pending);
        MedicationOperation = await MedicationService.GetMedicationsOfUser(await GetUserId());
        if (MedicationOperation.Status == OperationResultType.Ok && MedicationOperation.Content.Any(med => med.AreNotificationsEnabled))
        {
            await NotificationClient.RequestAccess(await GetUserId());
        }
        StateHasChanged();
    }

    private void LoadMedicationDataIntoModal(Medication medication)
    {
        MedicationForm = MedicationFormConverter.ConvertModelToForm(medication);
    }

    private void LoadNewMedicationIntoModal()
    {
        MedicationForm = new MedicationForm();
    }

    private async Task DeleteMedication()
    {
        var medication = MedicationFormConverter.ConvertFormToModel(MedicationForm, await GetUserId());
        DeleteMedicationOperation = await MedicationService.DeleteMedication(medication);
        if (DeleteMedicationOperation.Status == OperationResultType.Ok)
        {
            await JsService.Execute("BootstrapManager.closeModal", "#medicationModal");
            await ReloadMedications();
        }
    }

}