@page "/Medications"

@attribute [Authorize]

@using MoodProject.Core.Models
@using MoodProject.Core.Enums
@using MoodProject.Core.Ports.In
@using MoodProject.Services
@using Microsoft.AspNetCore.Components
@using MoodProject.App.Models
@inject IMedicationService MedicationService

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

<h1 class="display-1">Vos médicaments</h1>
<div class="symptoms my-3">
    <div class="card">
      <div class="card-header">
        Médicaments enregistrés
      </div>
      <div class="card-body">
        @if (MedicationOperation.Status == OperationResultType.Pending)
        {
            <LoadingText />
        }
        else
        {
            if (MedicationOperation.Content.Any())
            {
                <ul class="list-group list-group-flush">
                    @foreach (var medication in MedicationOperation.Content)
                    {
                        <li class="list-group-item">
                            @medication.Name
                        </li>
                    }
                </ul>
            }
            else
            {
                <InfoMessage Text="Vous n'avez encore enregistré aucun médicament." />
            }
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMedicationModal">Ajouter un médicament</button>
            <Modal Id="addMedicationModal" PrimaryButtonText="Ajouter" SecondaryButtonText="Annuler" OnPrimaryButtonClick="@(async () => await SubmitMedicationForm())">
                
                <EditForm Model="@MedicationForm" OnSubmit="SubmitMedicationForm">
                    <div class="form-group">
                        <label>Nom</label>
                        <InputText @bind-Value="@MedicationForm.Name" DisplayName="@MedicationForm.Name" placeholder="Nom du médicament" class="form-control"/>
                        <label>Type de prise</label>
                        <InputSelect @bind-Value="@MedicationForm.Usage" placeholder="Utilisation" class="form-control">
                            @foreach (var usage in MedicationForm.UsageDictionnary)
                            {
                                <option value="@usage.Key">@usage.Value</option>
                            }
                        </InputSelect>
                        @if (MedicationForm.Usage == MedicationUsage.PER_DAY)
                        {
                            <label>Combien de fois par jour prennez-vous ce médicament ?</label>
                            <input type="number" @bind-value="@MedicationForm.UsagePerDay" @onchange="@MedicationForm.UpdateListLength" @bind-value:event="oninput" class="form-control"/>
                            if (MedicationForm.UsagePerDay > 0)
                            {
                                <label>A quelle heure prennez-vous ce médicament ?</label>
                                @foreach (var dayUsage in MedicationForm.DayUsages)
                                {
                                    <InputDate Type="InputDateType.Time" @bind-Value:format="hh:mm:ss" @bind-Value="@dayUsage.Time" class="form-control dayUsageTimePicker"/>
                                }
                            }
                        }
                        @if (MedicationForm.Usage == MedicationUsage.PER_MONTH)
                        {
                            <label>Combien de fois par mois prennez-vous ce médicament ?</label>
                            <InputSelect @bind-Value="@MedicationForm.MonthUsage" placeholder="Utilisation" class="form-control">
                                @foreach (var usage in MedicationForm.MonthUsageDictionnary)
                                {
                                    <option value="@usage.Key">@usage.Value</option>
                                }
                            </InputSelect>
                        }
                    </div>
                    <button type="submit" class="btn btn-primary">AjouterForm</button>
                </EditForm>
            </Modal>
        }
      </div>
    </div>
</div>

@code {
    private OperationResult<IEnumerable<Medication>> MedicationOperation = new(OperationResultType.Pending);
    private OperationResult<Medication> SubmitMedicationFormOperation = new(OperationResultType.WaitingForUser);
    private MedicationForm MedicationForm = new();
    
    protected override async Task OnInitializedAsync()
    {
        MedicationOperation = await MedicationService.GetMedicationsOfUser(await GetUserId());
        InsertFirstScheduleInForm();
    }

    private void InsertFirstScheduleInForm()
    {
    }

    private async Task SubmitMedicationForm()
    {
        MedicationForm.UserId = await GetUserId();
        var response = await MedicationService.UpdateMedication(MedicationForm);
        Console.WriteLine(response.Status);
    }
}