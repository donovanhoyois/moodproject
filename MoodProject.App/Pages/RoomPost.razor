@page "/Rooms/Post/{PostId:int}"
@using MoodProject.Core.Models
@using MoodProject.Core.Enums
@using MoodProject.Core.Ports.In
@using MoodProject.App.Models
@using MoodProject.App.Services
@using System.Net

@inject IChatRoomsService RoomsService
@inject IUsersService UsersService
@inject JsService JsService

@inherits BasePage

@if (PostOperation.Status is OperationResultType.Pending)
{
    <LoadingText/>
}
else if (PostOperation.Status is OperationResultType.Ok)
{
    <div class="card">
        <div class="card-header">
            @PostOperation.Content.Title
        </div>
        <div class="card-body">
            <p class="card-text">@PostOperation.Content.Content</p>
        </div>
        <div class="card-footer">
            @{
                var nickname = string.Empty;
                if (AuthorMappingOperation.Status == OperationResultType.Ok)
                {
                    nickname = AuthorMappingOperation.Content.First(map => map.Key.Equals(PostOperation.Content.AuthorId)).Value;
                }
                <p>Publié le @PostOperation.Content.PublishedDate.ToString("d") par @(nickname == "x" ? "Utilisateur anonyme" : nickname)</p>
            }
        </div>
            
    </div>
    @if (PostOperation.Content.Comments.Any(comment => comment.ModerationStatus == ModerationStatus.Published))
    {
        <div class="card">
            <div class="card-header">
                @PostOperation.Content.Comments.Count(comment => comment.ModerationStatus == ModerationStatus.Published) Commentaire(s)
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var comment in PostOperation.Content.Comments.Where(comment => comment.ModerationStatus == ModerationStatus.Published))
                {
                    <li class="list-group-item">
                        @comment.Content
                        <p class="text-end mb-0 mt-3">
                            @{
                                nickname = string.Empty;
                                if (AuthorMappingOperation.Status == OperationResultType.Ok)
                                {
                                    nickname = AuthorMappingOperation.Content.FirstOrDefault(map => map.Key.Equals(comment.AuthorId)).Value;
                                }
                            }
                            - @(nickname == "x" ? "Utilisateur anonyme" : nickname) le @comment.PublishedDate.ToString("d")
                        </p>
                    </li>
                }
            </ul>
        </div>
        <Modal
            Id="newNicknameModal"
            PrimaryButtonText="Confirmer"
            SecondaryButtonText="Rester anonyme"
            Title="Choisissez votre surnom"
            OnPrimaryButtonClick="@(async () => await SubmitNewNickname(false))"
            OnSecondaryButtonClick="@(async () => await SubmitNewNickname(true))">
            @if (UpdateNicknameOperation.Status == OperationResultType.Error)
            {
                <ErrorMessage Text="@UpdateNicknameOperation.Message" />
            }
            <p>Le surnom sera associé aux publications et commentaires que vous publierez sur l'application.</p>
            <p>Si vous ne souhaitez pas de surnom, vous pouvez choisir de rester anonyme en cliquant sur le bouton "Rester anonyme"</p>
            <EditForm Model="@NewNicknameForm">
                <label>Surnom: </label>
                <InputText @bind-Value="@NewNicknameForm.Nickname" class="form-control"></InputText>
            </EditForm>
        </Modal>
    }
    else
    {
        <InfoMessage Text="Il n'y a encore aucun commentaire sur ce post."/>
    }
    @if (NewCommentOperation.Status is OperationResultType.WaitingForUser or OperationResultType.Error)
    {
        <EditForm Model="@FormComment" OnSubmit="SubmitNewComment">
            <div class="form-group">
                <label>Ajouter un commentaire</label>
                <InputTextArea @bind-Value="@FormComment.Content" DisplayName="@FormComment.Content" placeholder="Votre commentaire ici..." class="form-control"/>
            </div>
            <div class="form-check">
                <InputCheckbox @bind-Value="@FormComment.MandatoryBoxIsChecked" class="form-check-input" />
                <label class="form-check-label" for="exampleCheck1">J'ai lu le <a href="/rooms/rules">réglement des espaces de discussions</a></label>
            </div>
            @if (NewCommentOperation.Status is OperationResultType.Ok)
            {
                <SuccessMessage Text="@NewCommentOperation.Message"/>
            }
            else if (NewCommentOperation.Status is OperationResultType.Error)
            {
                <ErrorMessage Text="@NewCommentOperation.Message"/>
            }
            <button type="submit" class="btn btn-primary">Commenter</button>
        </EditForm>
    }
    else if (NewCommentOperation.Status is OperationResultType.Ok)
    {
        <SuccessMessage Text="@NewCommentOperation.Message" />
        <button class="btn btn-primary" @onclick="ResetNewCommentForm">Ajouter un autre commentaire</button>
    }

}
else if (PostOperation.Status is OperationResultType.Error)
{
    <ErrorMessage Text="@PostOperation.Message" />
}

@code {
    [Parameter]
    public int PostId { get; set; }

    private NewChatRoomCommentForm FormComment { get; set; } = new();
    private NewNicknameForm NewNicknameForm { get; set; } = new();
    
    private OperationResult<ChatRoomComment> NewCommentOperation { get; set; } = new(OperationResultType.WaitingForUser);
    private OperationResult<HttpStatusCode> UpdateNicknameOperation { get; set; } = new(OperationResultType.WaitingForUser);

    private OperationResult<ChatRoomPost> PostOperation = new(OperationResultType.Pending);
    private OperationResult<Dictionary<string, string>> AuthorMappingOperation = new(OperationResultType.Pending);
    private OperationResult<bool> HasChosenNicknameOperation = new(OperationResultType.Pending);
    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        PostOperation = await RoomsService.GetPostById(PostId);
        
        var authors = PostOperation.Content.Comments
            .GroupBy(p => p.AuthorId)
            .Select(grp => grp.First().AuthorId).ToList();
        authors.Add(PostOperation.Content.AuthorId);
        AuthorMappingOperation = await UsersService.GetUsernamesMapping(authors);
        
        HasChosenNicknameOperation = await UsersService.GetHasChosenNickname(await IdentityService.GetUserId());
    }

    private async Task SubmitNewComment(EditContext editContext)
    {
        if (HasChosenNicknameOperation.Status == OperationResultType.Ok && !HasChosenNicknameOperation.Content)
        {
            await JsService.Execute("BootstrapManager.openModal", "#newNicknameModal");
        }
        else
        {
            if (!FormComment.MandatoryBoxIsChecked)
            {
                NewCommentOperation = new OperationResult<ChatRoomComment>(OperationResultType.Error)
                {
                    Message = "Vous devez accepter le réglement avant de publier un commentaire dans cet espace de discussion."
                };
                return;
            }
            FormComment.ChatRoomPostId = PostId;
            FormComment.AuthorId = await IdentityService.GetUserId();
            FormComment.ModerationStatus = ModerationStatus.Pending;
            FormComment.PublishedDate = DateTime.Now;
            NewCommentOperation = await RoomsService.CreateComment(FormComment);
        }
    }

    private void ResetNewCommentForm()
    {
        FormComment.MandatoryBoxIsChecked = false;
        FormComment.Content = string.Empty;
        NewCommentOperation = new(OperationResultType.WaitingForUser);
    }

    private async Task SubmitNewNickname(bool anonymous)
    {
        if (anonymous)
        {
            NewNicknameForm.Nickname = "x";
        }
        UpdateNicknameOperation = await UsersService.UpdateNickname(await IdentityService.GetUserId(), NewNicknameForm.Nickname);
        StateHasChanged();
        if (UpdateNicknameOperation.Status == OperationResultType.Ok)
        {
            HasChosenNicknameOperation = await UsersService.GetHasChosenNickname(await IdentityService.GetUserId());
            await JsService.Execute("BootstrapManager.closeModal", "#newNicknameModal");
        }
    }
}