@page "/Room/{RoomId:int}/{PostId:int}"
@using MoodProject.Core.Models
@using MoodProject.Core.Enums
@using MoodProject.Core.Ports.In

@inject IChatRoomsService RoomsService

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

@switch (postOperation.Status)
{
    case OperationResultType.Pending:
        <LoadingText />
        break;
        
    case OperationResultType.Ok:
        <div class="card">
            <div class="card-header">
                @postOperation.Content.Title
            </div>
            <div class="card-body">
                <p class="card-text">@postOperation.Content.Content</p>
                
            </div>
            <div class="card-footer">
                Publié le @postOperation.Content.PublishedDate par @postOperation.Content.AuthorId
            </div>
            
        </div>
        <div class="card">
            <ul class="list-group list-group-flush">
                @foreach (var comment in postOperation.Content.Comments)
                {
                    <li class="list-group-item">@comment.Content</li>
                }
            </ul>
        </div>
        <EditForm Model="@FormComment" OnSubmit="SubmitNewComment">
            <InputTextArea @bind-Value="@FormComment.Content" DisplayName="@FormComment.Content" class="form-control" />
            <button type="submit" class="btn btn-primary">Envoyer</button>
        </EditForm>
        @if (NewCommentOperation.Status is OperationResultType.Ok)
        {
            <SuccessMessage Text="@NewCommentOperation.Message" />
            <a class="btn btn-primary">Retour à l'espace de discussion</a>
        }
        else if (NewCommentOperation.Status is OperationResultType.Error)
        {
            <ErrorMessage Text="@NewCommentOperation.Message"/>
        }
        
        break;
        
    default:
        <div class="alert alert-danger" role="alert">
            @postOperation.Message
        </div>
        break;
}

@code {
    [Parameter]
    public int RoomId { get; set; }
    [Parameter]
    public int PostId { get; set; }

    private ChatRoomComment FormComment { get; set; } = new();
    private OperationResult<ChatRoomComment> NewCommentOperation { get; set; } = new(OperationResultType.WaitingForUser);

    private OperationResult<ChatRoomPost> postOperation = new(OperationResultType.Pending);
    
    protected override async Task OnInitializedAsync()
    {
        postOperation = await RoomsService.GetPostById(PostId);
    }

    private async Task SubmitNewComment()
    {
        FormComment.PostId = postOperation.Content.Id;
        FormComment.AuthorId = await GetUserId();
        FormComment.ModerationStatus = ModerationStatus.Pending;
        FormComment.PublishedDate = DateTime.Now;
        NewCommentOperation = await RoomsService.CreateComment(FormComment);
    }
}