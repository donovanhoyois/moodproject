@page "/quizz"
@using MoodProject.Core.Ports.In
@using MoodProject.App.Models
@using MoodProject.Core.Enums
@using MoodProject.Core.Models
@attribute [Authorize]

@inject IQuizzService QuizzService
@inject IQuizzGenerator QuizzGenerator

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

<PageTitle>Questionnaire</PageTitle>
<h1>Questionnaire</h1>
<div>
    @if (quizzQuestionsOperation.Status == OperationResultType.Pending)
    {
        <p>Génération du questionnaire, veuillez patienter...</p>
    }
    else if(quizzQuestionsOperation.Status == OperationResultType.Ok)
    {
        if (currentQuestion < quizz.Questions.Count)
        {
            <p>@(currentQuestion+1)/@quizz.Questions.Count</p>
            <QuizzQuestionCard
                Question=quizz.Questions[currentQuestion]
                OnClickValidateAction="() => Confirm()"
                ValidateButtonText="@ValidateButtonText"/>
        }
        else
        {
            <SuccessMessage Text="Merci d'avoir répondu !"/>
            <a class="btn btn-primary" href="/profile">Voir mon profil</a>
        }
    }
    else
    {
        <ErrorMessage Text="@quizzQuestionsOperation.Message" />
    }
</div>

@code{

    private QuizzForm quizz = new QuizzForm(new List<AnswerableQuizzQuestion>());
    private int currentQuestion = 0;
    private string ValidateButtonText = string.Empty;

    private OperationResult<IEnumerable<QuizzQuestion>> quizzQuestionsOperation { get; set; } = new(OperationResultType.Pending);
    
    
    protected override async Task OnInitializedAsync()
    {
        quizzQuestionsOperation = await QuizzGenerator.Generate(await GetUserId());
        if (quizzQuestionsOperation.Status == OperationResultType.Ok)
        {
            quizz = new QuizzForm(quizzQuestionsOperation.Content);
            ValidateButtonText = GetValidateButtonText();
        }
    }

    private async Task Confirm()
    {
        currentQuestion++;
        ValidateButtonText = GetValidateButtonText();
        if (currentQuestion >= quizz.Questions.Count)
        {
            var valuesToSubmit = new List<FactorValue>();
            foreach (var question in quizz.Questions)
            {
                valuesToSubmit.Add(new()
                {
                    SymptomId = question.Symptom.Id,
                    Timestamp = DateTime.Now,
                    Type = question.CustomQuestion.FactorType,
                    Value = question.Result
                });
            }

            var symptoms = quizz.Questions.Select(q => q.Symptom).ToHashSet();
            await QuizzService.Submit(symptoms, valuesToSubmit);
        }
        StateHasChanged();
    }

    private string GetValidateButtonText()
    {
        return currentQuestion + 1 >= quizz.Questions.Count ? "Terminer le questionnaire" : "Continuer";
    }
}