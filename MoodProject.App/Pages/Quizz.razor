@page "/quizz"
@using MoodProject.Core.Ports.In
@using MoodProject.App.Models
@using MoodProject.Core.Enums
@using MoodProject.Core.Models
@attribute [Authorize]

@inject IQuizzService QuizzService

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

<PageTitle>Questionnaire</PageTitle>
<h3>Questionnaire</h3>
<div>
    @if (quizzQuestionsOperation.Status == OperationResultType.Pending)
    {
        <p>Génération du questionnaire, veuillez patienter...</p>
    }
    else if(quizzQuestionsOperation.Status == OperationResultType.Ok)
    {
        if (currentQuestion < quizz.Questions.Count())
        {
            <QuizzQuestionCard Question=quizz.Questions[currentQuestion] OnClickValidateAction="() => Confirm()"/>
        }
        else
        {
            <div class="alert alert-success" role="alert">
                Merci d'avoir répondu !
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            @quizzQuestionsOperation.Message
        </div>
    }
</div>

@code{

    private QuizzForm quizz = new QuizzForm(new List<AnswerableQuizzQuestion>());
    private int currentQuestion = 0;

    private OperationResult<IEnumerable<QuizzQuestion>> quizzQuestionsOperation { get; set; } = new(OperationResultType.Pending);
    
    protected override async Task OnInitializedAsync()
    {
        quizzQuestionsOperation = await QuizzService.Generate(await GetUserId());
        Console.WriteLine("Generation ended.");
        if (quizzQuestionsOperation.Status == OperationResultType.Ok)
        {
            quizz = new QuizzForm(quizzQuestionsOperation.Content);
        }
    }

    private async Task Confirm()
    {
        currentQuestion++;
        if (currentQuestion >= quizz.Questions.Count)
        {
            var valuesToSubmit = new List<FactorValue>();
            foreach (var question in quizz.Questions)
            {
                valuesToSubmit.Add(new()
                {
                    SymptomId = question.Symptom.Id,
                    Timestamp = DateTime.Now,
                    Type = question.CustomQuestion.FactorType,
                    Value = question.Result
                });
            }
            
            var symptoms = quizz.Questions.Select(q => q.Symptom).ToList();
            await QuizzService.Submit(symptoms, valuesToSubmit);
        }
        StateHasChanged();
    }
}