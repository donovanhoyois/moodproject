@page "/Profile"
@using MoodProject.Core.Ports.In
@using MoodProject.App.Models
@using MoodProject.Core.Enums
@using MoodProject.Core.Models
@using ChartJs.Blazor;
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Util
@using MoodProject.App.Services
@using System.Net
@inject ISymptomsTypesService TypesService
@inject ISymptomsService SymptomsService
@inject IHealthService HealthService
@inject IUsersService UsersService
@inject JsService JsService

@attribute [Authorize]

@inherits BasePage

<h1>Votre profil</h1>
<div class="symptoms my-3">
    <div class="card">
      <div class="card-header">
        Vos symptomes
      </div>
        <div class="card-body">
            <p class="card-text">Vous pouvez modifier les symptomes qui seront suivis à tout moment.</p>
            <EditForm Model="_symptomTypesForm" OnSubmit="SymptomsSubmit" Context="formContext">
                @foreach (var type in _symptomTypesForm.symptomsTypesCheckboxes)
                {
                    <div class="form-check">
                        <InputCheckbox @bind-Value="@type.IsChecked" DisplayName="@type.Name" class="form-check-input"/>
                        <label class="form-check-label">
                            @type.Name
                        </label>
                    </div>
                }
                <br />
                @if (SymptomsFormOperation.Status == OperationResultType.Ok)
                {
                    <SuccessMessage Text="@SymptomsFormOperation.Message"/>
                }
                @if (SymptomsFormOperation.Status == OperationResultType.Error)
                {
                    <ErrorMessage Text="@SymptomsFormOperation.Message"/>
                }
                <button type="button" class="btn btn-success p-2" onclick="@SymptomsSubmit">Valider</button>
            </EditForm>
        </div>
        <div class="card-header">
            Votre surnom
        </div>
        <div class="card-body">
            <p>Choisissez le surnom qui sera associé à vos publications et vos commentaires dans les différents espaces de discussion.</p>
            <p>Vous pouvez également être anonyme en cliquant sur le bouton "Rester anonyme".</p>
            <EditForm Model="@NewNicknameForm" OnSubmit="() => NicknameSubmit(false)">
                <label>Surnom: </label>
                <InputText @bind-Value="@NewNicknameForm.Nickname" class="form-control mb-3"></InputText>
                @if (UpdateNicknameOperation.Status == OperationResultType.Error)
                {
                    <ErrorMessage Text="@UpdateNicknameOperation.Message" />
                }
                @if (UpdateNicknameOperation.Status == OperationResultType.Ok)
                {
                    <SuccessMessage Text="@UpdateNicknameOperation.Message" />
                }
                <button type="submit" class="btn btn-success">Confirmer</button>
                <button type="button" class="btn btn-secondary mx-3" data-bs-dismiss="modal" @onclick="() => NicknameSubmit(true)">Rester anonyme</button>
            </EditForm>
        </div>
    </div>
</div>
<div class="health-average my-3">
    @switch (healthAveragePercentageOperation.Status)
    {
        case OperationResultType.Pending:
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            break;
            
        case OperationResultType.Ok:
            <div class="card">
                <div class="card-header">
                    Votre moyenne santé
                </div>
                <div class="card-body">
                    <blockquote class="blockquote mb-0">
                        <CircleProgress Percentage=@healthAveragePercentageOperation.Content />
                    </blockquote>
                </div>
            </div>
            break;
            
        default:
            <div class="alert alert-danger" role="alert">
                @healthAveragePercentageOperation.Message
            </div>
            break;
    }
</div>
<div class="graph my-3">
    @if (graphConfig != null)
    {
        <Chart Config="graphConfig"></Chart>
    }
</div>

@code {

    private List<SymptomType> symptomsTypes = new();
    private List<Symptom> symptoms = new();
    private SymptomsTypesForm _symptomTypesForm = new(new List<SymptomType>());
    private NewNicknameForm NewNicknameForm = new();

    private LineConfig graphConfig;
    private bool ShowGraph = false;

    private OperationResult<bool> SymptomsFormOperation = new(OperationResultType.WaitingForUser);
    private OperationResult<HttpStatusCode> UpdateNicknameOperation { get; set; } = new(OperationResultType.WaitingForUser);
    
    private OperationResult<float> healthAveragePercentageOperation = new(OperationResultType.Pending);
    private OperationResult<string> CurrentNicknameOperation = new(OperationResultType.Pending);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _symptomTypesForm = new SymptomsTypesForm((await TypesService.GetAll()).ToList());
        symptoms = (await SymptomsService.GetSymptomsWithHistory(await IdentityService.GetUserId())).ToList();
        
        CheckRetrievedSymptoms();
        CalculateHealthAverages();
        CurrentNicknameOperation = await UsersService.GetNickname(await IdentityService.GetUserId());
        if (CurrentNicknameOperation.Status == OperationResultType.Ok)
        {
            NewNicknameForm.Nickname = CurrentNicknameOperation.Content == "x"
                ? string.Empty
                : CurrentNicknameOperation.Content;
        }

        if (healthAveragePercentageOperation.Status == OperationResultType.Ok)
        {
            var graphValues = CalculateGraphValues();
            if (graphValues.Count() > 1)
            {
                ConfigureHealthHistoryGraph(graphValues);
            }
        }
    }

    /// <summary>
    /// Retrieve the current symptoms of the user and turn on the corresponding checkboxes
    /// </summary>
    private void CheckRetrievedSymptoms()
    {
        foreach (var symptom in symptoms)
        {
            var typeCheckbox = _symptomTypesForm.symptomsTypesCheckboxes.FirstOrDefault(s => s.Id.Equals(symptom.TypeId));
            typeCheckbox.IsChecked = true;
        }
    }

    /// <summary>
    /// Submit the checkboxes form
    /// </summary>
    private async Task SymptomsSubmit()
    {
        var updatedSymptomsList = new List<Symptom>();
        foreach (var symptomType in _symptomTypesForm.symptomsTypesCheckboxes.Where(symptomType => symptomType.IsChecked))
        {
            updatedSymptomsList.Add(new Symptom()
            {
                Type = symptomType,
                TypeId = symptomType.Id,
                UserId = await IdentityService.GetUserId(),
                ValuesHistory = new List<FactorValue>()
            });
        }
        SymptomsFormOperation = await SymptomsService.SaveSymptoms(updatedSymptomsList);
    }

    /// <summary>
    /// Submit the nickname form
    /// </summary>
    private async Task NicknameSubmit(bool anonymous)
    {
        if (anonymous)
        {
            NewNicknameForm.Nickname = string.Empty;
        }
        UpdateNicknameOperation = await UsersService.UpdateNickname(await IdentityService.GetUserId(), anonymous ? "x" : NewNicknameForm.Nickname);
        StateHasChanged();
        if (UpdateNicknameOperation.Status == OperationResultType.Ok)
        {
            await JsService.Execute("BootstrapManager.closeModal", "#newNicknameModal");
        }
    }

    private void CalculateHealthAverages()
    {
        healthAveragePercentageOperation = HealthService.GetHealthAverageAsPercentage(symptoms);
        if (healthAveragePercentageOperation.Status.Equals(OperationResultType.Ok))
        {
            healthAveragePercentageOperation.Content = (float) Math.Round(healthAveragePercentageOperation.Content, MidpointRounding.ToEven);
        }
    }

    private void ConfigureHealthHistoryGraph(IEnumerable<double> values)
    {
        graphConfig = new LineConfig()
        {
            Options = new LineOptions()
            {
                Responsive = true,
                Title = new OptionsTitle()
                {
                    Display = true,
                    Text = "Historique de votre moyenne santé"
                },
                Scales = new Scales()
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Age"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            },
            Data =
            {
                Datasets =
                {
                    new LineDataset<double>(values)
                    {
                        Label = "Moyenne santé",
                        BackgroundColor = ColorUtil.ColorHexString(255, 255, 255),
                        BorderColor = ColorUtil.ColorHexString(40, 40, 160),
                        Fill = FillingMode.Disabled
                    }
                }
            }
        };
        
        for (var i = 0; i < values.Count(); i++)
        {
            graphConfig.Data.Labels.Add(string.Empty);
        }
    }
    
    private IEnumerable<double> CalculateGraphValues()
    {
        return HealthService.GetHealthAverageHistory(symptoms, 10)
                .Reverse()
                .Select(v => Math.Round(v, MidpointRounding.ToEven));
    }
}