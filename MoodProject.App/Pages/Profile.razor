@page "/Profile"
@using MoodProject.Core.Ports.In
@using MoodProject.App.Models
@using Microsoft.AspNetCore.Components
@using MoodProject.Core.Enums
@using MoodProject.Core.Models
@inject IJSRuntime JsRuntime
@inject ISymptomsTypesService TypesService
@inject ISymptomsService SymptomsService
@inject IQuizzService QuizzService

@attribute [Authorize]

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

<h1 class="display-1">Votre profil</h1>
<div class="symptoms my-3">
    <div class="card">
      <div class="card-header">
        Vos symptomes
      </div>
      <div class="card-body">
          <p class="card-text">Vous pouvez modifier les symptomes qui seront suivis à tout moment.</p>
          <EditForm Model="_symptomTypesForm" OnSubmit="SymptomsSubmit" Context="formContext">
              @foreach (var type in _symptomTypesForm.symptomsTypesCheckboxes)
              {
                  <div class="form-check">
                      <InputCheckbox @bind-Value="@type.IsChecked" DisplayName="@type.Name" class="form-check-input"/>
                      <label class="form-check-label" for="flexCheckDefault">
                          @type.Name
                      </label>
                  </div>
              }
              <br />
              <button type="button" class="btn btn-success p-2" onclick="@SymptomsSubmit">Valider</button>
          </EditForm>
      </div>
    </div>
</div>
<div class="health-average my-3">
    @if (healthAveragePercentageOperation.Status == OperationResultType.Pending)
    {
        <div class="spinner-border text-success" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        @if (healthAveragePercentageOperation.Status.Equals(OperationResultType.Ok))
        {
            <div class="card">
                <div class="card-header">
                    Votre moyenne santé
                </div>
                <div class="card-body">
                    <blockquote class="blockquote mb-0">
                        <CircleProgress Percentage=@healthAveragePercentageOperation.Content />
                    </blockquote>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                @healthAveragePercentageOperation.Message
            </div>
        }
    }
</div>

@code {

    private List<SymptomType> symptomsTypes = new List<SymptomType>();
    private List<Symptom> symptoms = new List<Symptom>();
    private SymptomsTypesForm _symptomTypesForm = new SymptomsTypesForm(new List<SymptomType>());

    private OperationResult<float> healthAveragePercentageOperation = new OperationResult<float>(OperationResultType.Pending);
    
    protected override async Task OnInitializedAsync()
    {
        _symptomTypesForm = new SymptomsTypesForm((await TypesService.GetAll()).ToList());
        symptoms = (await SymptomsService.GetSymptomsWithHistory(await GetUserId())).ToList();
        
        CheckRetrievedSymptoms();
        CalculateHealthAverages();
    }

    /// <summary>
    /// Retrieve the current symptoms of the user and turn on the corresponding checkboxes
    /// </summary>
    private void CheckRetrievedSymptoms()
    {
        foreach (var symptom in symptoms)
        {
            var typeCheckbox = _symptomTypesForm.symptomsTypesCheckboxes.FirstOrDefault(s => s.Id.Equals(symptom.TypeId));
            typeCheckbox.IsChecked = true;
        }
    }

    /// <summary>
    /// Submit the checkboxes form
    /// </summary>
    private async Task SymptomsSubmit()
    {
        var updatedSymptomsList = new List<Symptom>();
        foreach (var symptomType in _symptomTypesForm.symptomsTypesCheckboxes.Where(symptomType => symptomType.IsChecked))
        {
            updatedSymptomsList.Add(new Symptom()
            {
                Type = symptomType,
                TypeId = symptomType.Id,
                UserId = await GetUserId(),
                ValuesHistory = new List<FactorValue>()
            });
        }
        var response = await SymptomsService.SaveSymptoms(updatedSymptomsList);
    }

    private void CalculateHealthAverages()
    {
        healthAveragePercentageOperation = QuizzService.GetHealthAverageAsPercentage(symptoms, 14);
        if (healthAveragePercentageOperation.Status.Equals(OperationResultType.Ok))
        {
            healthAveragePercentageOperation.Content = (float) Math.Round(healthAveragePercentageOperation.Content, MidpointRounding.ToEven);
        }
    }
}