@page "/Profile"
@using MoodProject.Core
@using MoodProject.Core.Ports.In
@using MoodProject.App.Models
@using Microsoft.AspNetCore.Components
@using MoodProject.Core.Enums
@using MoodProject.Core.Models
@inject ISymptomsTypesService TypesService
@inject ISymptomsService SymptomsService
@inject IQuizzService QuizzService

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

<AuthorizeView>
    <Authorized>
        <h3>Profil</h3>
        <div>
            <h4>Vos symptomes</h4>
            <p>Vous pouvez modifier les symptomes qui seront suivis à tout moment.</p>
            <EditForm Model="_symptomTypesForm" OnSubmit="SymptomsSubmit" Context="formContext">
                @foreach (var type in _symptomTypesForm.symptomsTypesCheckboxes)
                {
                    <InputCheckbox @bind-Value="@type.IsChecked" DisplayName="@type.Name"/> @type.Name<br />
                }
                <input type="submit" value="Enregistrer"/>
            </EditForm>
        </div>
        <br /><br />
        <div class="health-average">
            <p>Votre moyenne santé</p>
            @if (healthAveragePercentageOperation.Status == OperationResultType.Pending)
            {
                <div>Calcul de votre moyenne santé...</div>
            }
            else
            {
                <div class="health-stats-list">
                    <div class="health-stat">
                        @if (healthAveragePercentageOperation.Status.Equals(OperationResultType.Ok))
                        {
                            <p>@healthAveragePercentageOperation.Content%</p>
                        }
                        else
                        {
                            <p>@healthAveragePercentageOperation.Message</p>
                        }
                        
                    </div>
                </div> 
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {

    private List<SymptomType> symptomsTypes = new List<SymptomType>();
    private List<Symptom> symptoms = new List<Symptom>();
    private SymptomsTypesForm _symptomTypesForm = new SymptomsTypesForm(new List<SymptomType>());

    private OperationResult<float> healthAveragePercentageOperation = new OperationResult<float>(OperationResultType.Pending);
    
    protected override async Task OnInitializedAsync()
    {
        _symptomTypesForm = new SymptomsTypesForm((await TypesService.GetAll()).ToList());
        symptoms = (await SymptomsService.GetSymptomsWithHistory(await GetUserId())).ToList();
        
        CheckRetrievedSymptoms();
        CalculateHealthAverages();
    }

    /// <summary>
    /// Retrieve the current symptoms of the user and turn on the corresponding checkboxes
    /// </summary>
    private void CheckRetrievedSymptoms()
    {
        foreach (var symptom in symptoms)
        {
            var typeCheckbox = _symptomTypesForm.symptomsTypesCheckboxes.FirstOrDefault(s => s.Id.Equals(symptom.TypeId));
            typeCheckbox.IsChecked = true;
        }
    }

    /// <summary>
    /// Submit the checkboxes form
    /// </summary>
    private async Task SymptomsSubmit()
    {
        var updatedSymptomsList = new List<Symptom>();
        foreach (var symptomType in _symptomTypesForm.symptomsTypesCheckboxes.Where(symptomType => symptomType.IsChecked))
        {
            updatedSymptomsList.Add(new Symptom()
            {
                Type = symptomType,
                TypeId = symptomType.Id,
                UserId = await GetUserId(),
                ValuesHistory = new List<FactorValue>()
            });
        }
        var response = await SymptomsService.SaveSymptoms(updatedSymptomsList);
    }

    private void CalculateHealthAverages()
    {
        healthAveragePercentageOperation = QuizzService.GetHealthAverageAsPercentage(symptoms, 14);
        if (healthAveragePercentageOperation.Status.Equals(OperationResultType.Ok))
        {
            healthAveragePercentageOperation.Content = (float) Math.Round(healthAveragePercentageOperation.Content, MidpointRounding.ToEven);
        }
    }
}