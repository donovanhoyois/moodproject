@page "/rooms/{RoomId:int}/create"
@using MoodProject.Core.Models
@using MoodProject.App.Models
@using MoodProject.App.Services
@using MoodProject.Core.Enums
@using MoodProject.Core.Ports.In
@using System.Net
@inject IChatRoomsService RoomsService
@inject IUsersService UsersService
@inject JsService JsService

@inherits BasePage

@attribute [Authorize]

<Modal
    Id="newNicknameModal"
    PrimaryButtonText="Confirmer"
    SecondaryButtonText="Rester anonyme"
    Title="Choisissez votre surnom"
    OnPrimaryButtonClick="@(async () => await SubmitNewNickname(false))"
    OnSecondaryButtonClick="@(async () => await SubmitNewNickname(true))">
    @if (UpdateNicknameOperation.Status == OperationResultType.Error)
    {
        <p>erreur</p>
        <ErrorMessage Text="@UpdateNicknameOperation.Message" />
    }
    <p>Le surnom sera associé aux publications et commentaires que vous publierez sur l'application.</p>
    <p>Si vous ne souhaitez pas de surnom, vous pouvez choisir de rester anonyme en cliquant sur le bouton "Rester anonyme"</p>
    <EditForm Model="@NewNicknameForm">
        <label>Surnom: </label>
        <InputText @bind-Value="@NewNicknameForm.Nickname" class="form-control"></InputText>
    </EditForm>
</Modal>
@if (CreateNewPostOperation.Status is OperationResultType.WaitingForUser or OperationResultType.Error)
{
    <EditForm Model="postForm" OnSubmit="Submit" Context="formContext">
        <div class="form-group">
            <label>Titre</label>
            <InputText @bind-Value="@postForm.Title" DisplayName="@postForm.Title" class="form-control"/>
        </div>
        <div class="form-group">
            <label>Contenu</label>
            <InputTextArea @bind-Value="@postForm.Content" DisplayName="@postForm.Content" class="form-control" />
        </div>
        <div class="form-check">
            <InputCheckbox @bind-Value="@postForm.MandatoryBoxIsChecked" class="form-check-input"/>
            <label class="form-check-label" for="exampleCheck1">J'ai lu le <a href="/rooms/rules">réglement des espaces de discussions</a></label>
        </div>
        @if (CreateNewPostOperation.Status is OperationResultType.Error)
        {
            <ErrorMessage Text="@CreateNewPostOperation.Message"/>
        }
        <button type="submit" class="btn btn-primary">Envoyer</button>
    </EditForm>
}
@if (CreateNewPostOperation.Status is OperationResultType.Ok)
{
    <SuccessMessage Text="@CreateNewPostOperation.Message" />
    <a class="btn btn-primary" href="/room/@RoomId">Retour à l'espace de discussion</a>
}


@code {

    [Parameter]
    public int RoomId { get; set; }

    private NewChatRoomPostForm postForm { get; set; } = new();
    private NewNicknameForm NewNicknameForm { get; set; } = new();

    private OperationResult<ChatRoomPost> CreateNewPostOperation { get; set; } = new(OperationResultType.WaitingForUser);
    private OperationResult<HttpStatusCode> UpdateNicknameOperation { get; set; } = new(OperationResultType.WaitingForUser);
    
    private OperationResult<bool> HasChosenNicknameOperation = new(OperationResultType.Pending);

    protected override async Task OnInitializedAsync()
    {
        HasChosenNicknameOperation = await UsersService.GetHasChosenNickname(await IdentityService.GetUserId());
    }

    private async Task Submit()
    {
        if (HasChosenNicknameOperation.Status == OperationResultType.Ok && !HasChosenNicknameOperation.Content)
        {
            await JsService.Execute("BootstrapManager.openModal", "#newNicknameModal");
        }
        else
        {
            if (!postForm.MandatoryBoxIsChecked)
            {
                CreateNewPostOperation = new OperationResult<ChatRoomPost>(OperationResultType.Error)
                {
                    Message = "Vous devez accepter le réglement avant de publier dans cet espace de discussion."
                };
                return;
            }
            postForm.ChatRoomId = RoomId;
            postForm.AuthorId = await IdentityService.GetUserId();
            postForm.ModerationStatus = ModerationStatus.Pending;
            postForm.PublishedDate = DateTime.Now;
            postForm.Comments = new List<ChatRoomComment>();

            CreateNewPostOperation = await RoomsService.CreatePost(postForm);
        }
    }
    
    private async Task SubmitNewNickname(bool anonymous)
    {
        if (anonymous)
        {
            NewNicknameForm.Nickname = "x";
        }
        UpdateNicknameOperation = await UsersService.UpdateNickname(await IdentityService.GetUserId(), NewNicknameForm.Nickname);
        StateHasChanged();
        if (UpdateNicknameOperation.Status == OperationResultType.Ok)
        {
            HasChosenNicknameOperation = await UsersService.GetHasChosenNickname(await IdentityService.GetUserId());
            await JsService.Execute("BootstrapManager.closeModal", "#newNicknameModal");
        }
    }
}