@page "/rooms/{RoomId:int}/create"
@using MoodProject.Core.Models
@using MoodProject.App.Models
@using MoodProject.Core.Enums
@using MoodProject.Core.Ports.In
@inject IChatRoomsService RoomsService

@attribute [Authorize]

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

@if (CreateNewPostOperation.Status is OperationResultType.WaitingForUser or OperationResultType.Error)
{
    <EditForm Model="PostForm" OnSubmit="Submit">
        <div class="form-group">
            <label>Titre</label>
            <InputText @bind-Value="@PostForm.Title" DisplayName="@PostForm.Title" class="form-control"/>
        </div>
        <div class="form-group">
            <label>Contenu</label>
            <InputTextArea @bind-Value="@PostForm.Content" DisplayName="@PostForm.Content" class="form-control" />
        </div>
        <div class="form-check">
            <InputCheckbox @bind-Value="@PostForm.MandatoryBoxIsChecked" class="form-check-input"/>
            <label class="form-check-label" for="exampleCheck1">J'ai lu le réglement des espaces de discussions</label>
        </div>
        @if (CreateNewPostOperation.Status is OperationResultType.Error)
        {
            <ErrorMessage Text="@CreateNewPostOperation.Message"/>
        }
        <button type="submit" class="btn btn-primary">Envoyer</button>
    </EditForm>
}
@if (CreateNewPostOperation.Status is OperationResultType.Ok)
{
    <SuccessMessage Text="@CreateNewPostOperation.Message" />
    <a class="btn btn-primary">Retour à l'espace de discussion</a>
}


@code {

    [Parameter]
    public int RoomId { get; set; }

    private NewChatRoomPostForm PostForm { get; } = new();

    private OperationResult<ChatRoomPost> CreateNewPostOperation { get; set; } = new(OperationResultType.WaitingForUser);

    private async Task Submit()
    {
        if (!PostForm.MandatoryBoxIsChecked)
        {
            CreateNewPostOperation = new OperationResult<ChatRoomPost>(OperationResultType.Error)
            {
                Message = "Vous devez accepter le réglement avant de publier dans cet espace de discussion."
            };
            return;
        }
        PostForm.ChatRoomId = RoomId;
        PostForm.AuthorId = await GetUserId();
        PostForm.ModerationStatus = ModerationStatus.Pending;
        PostForm.PublishedDate = DateTime.Now;
        PostForm.Comments = new List<ChatRoomComment>();

        CreateNewPostOperation = await RoomsService.CreatePost(PostForm);
    }
}