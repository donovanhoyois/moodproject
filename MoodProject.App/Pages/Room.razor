@page "/Room/{Id:int}"
@using MoodProject.Core.Models
@using MoodProject.Core.Ports.In
@using MoodProject.Core.Enums
@inject IChatRoomsService RoomsService

@attribute [Authorize]

@inherits MoodProject.App.Shared.Helpers.IdentityHelper

@switch (roomOperation.Status)
{
    case OperationResultType.Pending:
        <div class="spinner-border text-success" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        break;

    case OperationResultType.Ok:
        if (roomOperation.Content.Posts.Any(p => p.ModerationStatus == ModerationStatus.Published))
        {
            <table class="table">
                <thead>
                <tr>
                    <th scope="col">Titre</th>
                    <th scope="col">Auteur</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var post in roomOperation.Content.Posts.Where(p => p.ModerationStatus == ModerationStatus.Published))
                {
                    <tr>
                        <td>@post.Title</td>
                        <td>@post.AuthorId</td>
                        <td><a class="btn btn-primary" href="/room/@Id/@post.Id">Voir</a></td>
                    </tr>
                    
                }
                </tbody>
            </table>
        }
        else
        {
            <InfoMessage Text="Il n'y a encore aucun post sur cet espace de discussion."/>
        }
        <AuthorizeView Roles="Moderator">
            <Authorized>
                @if (roomOperation.Content.Posts.Any(p => p.ModerationStatus != ModerationStatus.Published))
                {
                    <table class="table">
                        <thead>
                        <tr>
                            <th scope="col">Titre</th>
                            <th scope="col">Auteur</th>
                            <th scope="col"></th>
                            <th scope="col">Statut</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var post in roomOperation.Content.Posts.Where(p => p.ModerationStatus != ModerationStatus.Published))
                        {
                            <tr>
                                <td>@post.Title</td>
                                <td>@post.AuthorId</td>
                                <td>
                                    <a class="btn btn-primary" href="/room/@Id/@post.Id">Voir</a>
                                    <button class="btn btn-success">Accepter</button>
                                    <button class="btn btn-danger">Refuser</button>
                                </td>
                                <td>
                                    @switch (post.ModerationStatus)
                                    {
                                        case ModerationStatus.Pending:
                                            <div class="alert alert-warning" role="alert">En attente de validation</div>
                                            break;
                
                                        case ModerationStatus.Published:
                                            <SuccessMessage Text="Publié"/>
                                            break;
                
                                        case ModerationStatus.Refused:
                                            <SuccessMessage Text="Refusé"/>
                                            break;
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </Authorized>
            <NotAuthorized>
                @if (roomOperation.Content.Posts.Any(p => p.AuthorId.Equals(userId)))
                {
                    <table class="table">
                        <thead>
                        <tr>
                            <th colspan="4">Vos publications</th>
                        </tr>
                        <tr>
                            <th scope="col">Titre</th>
                            <th scope="col"></th>
                            <th scope="col">Statut</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var post in roomOperation.Content.Posts.Where(p => p.ModerationStatus != ModerationStatus.Published && p.AuthorId.Equals(userId)))
                        {
                            <tr>
                                <td>@post.Title</td>
                                <td>
                                    <a class="btn btn-primary" href="/room/@Id/@post.Id">Voir</a>
                                </td>
                                <td>
                                    @switch (post.ModerationStatus)
                                    {
                                        case ModerationStatus.Pending:
                                            <div class="alert alert-warning" role="alert">En attente de validation</div>
                                            break;
                
                                        case ModerationStatus.Published:
                                            <SuccessMessage Text="Publié"/>
                                            break;
                
                                        case ModerationStatus.Refused:
                                            <ErrorMessage Text="Refusé"/>
                                            break;
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </NotAuthorized>
        </AuthorizeView>
        break;

    default:
        <div class="alert alert-danger" role="alert">
            @roomOperation.Message
        </div>
        break;
        
}
<td><a class="btn btn-primary" href="/room/@Id/create">Créer un nouveau post</a></td>

@code {
    [Parameter]
    public int Id { get; set; }

    private string userId { get; set; }

    private OperationResult<ChatRoom> roomOperation = new(OperationResultType.Pending);
    
    // TODO: Boutons valider & refuser

    protected override async Task OnInitializedAsync()
    {
        roomOperation = await RoomsService.GetRoomById(Id);
        userId = await GetUserId();
    }
}