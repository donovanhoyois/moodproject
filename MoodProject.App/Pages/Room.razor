@page "/Room/{Id:int}"
@using MoodProject.Core.Models
@using MoodProject.Core.Ports.In
@using MoodProject.Core.Enums
@inject IChatRoomsService RoomsService
@inject IUsersService UsersService
@inject NavigationManager NavigationManager

@attribute [Authorize]

@inherits BasePage

@switch (RoomOperation.Status)
{
    case OperationResultType.Pending:
        <div class="spinner-border text-success" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        break;

    case OperationResultType.Ok:
        if (RoomOperation.Content.Posts.Any(p => p.ModerationStatus == ModerationStatus.Published))
        {
            <table class="table table-hover">
                <thead class="thead-dark">
                <tr>
                    <th scope="col">Titre</th>
                    @if (AuthorMappingOperation.Status == OperationResultType.Ok)
                    {
                        <th scope="col">Auteur</th>
                    }
                </tr>
                </thead>
                <tbody>
                @foreach (var post in RoomOperation.Content.Posts.Where(p => p.ModerationStatus == ModerationStatus.Published))
                {
                    <tr @onclick="@(()=> NavigationManager.NavigateTo($"/rooms/post/{post.Id}"))">
                        <td>@post.Title</td>
                        @if (AuthorMappingOperation.Status == OperationResultType.Ok)
                        {
                            var nickname = AuthorMappingOperation.Content.First(map => map.Key.Equals(post.AuthorId)).Value;
                            <td>@(nickname.Equals("x") ? "Utilisateur anonyme" : nickname)</td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <InfoMessage Text="Il n'y a encore aucun post sur cet espace de discussion."/>
        }
        break;

    default:
        <div class="alert alert-danger" role="alert">
            @RoomOperation.Message
        </div>
        break;
        
}
<td><a class="btn btn-primary" href="/rooms/@Id/create">Créer un nouveau post</a></td>

@code {
    [Parameter]
    public int Id { get; set; }

    private OperationResult<ChatRoom> RoomOperation = new(OperationResultType.Pending);
    private OperationResult<Dictionary<string, string>> AuthorMappingOperation = new(OperationResultType.Pending);


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        RoomOperation = await RoomsService.GetRoomById(Id);
        var authors = new HashSet<string>();
        if (RoomOperation.Status == OperationResultType.Ok && RoomOperation.Content.Posts.Any())
        {
            AuthorMappingOperation = await UsersService.GetUsernamesMapping(
                RoomOperation.Content.Posts
                    .GroupBy(p => p.AuthorId)
                    .Select(grp => grp.First().AuthorId));
        }
    }

    private async Task UpdatePostStatus(int id, ModerationStatus newStatus)
    {
        var post = RoomOperation.Content.Posts.FirstOrDefault(p => p.Id.Equals(id));
        if (post != null)
        {
            post.ModerationStatus = newStatus;
            var updateOperation = await RoomsService.UpdatePost(post);
            if (updateOperation.Status.Equals(OperationResultType.Ok))
            {
                StateHasChanged();
            }
        }
    }
}