@* Client/Pages/Authentication.razor *@

@page "/authentication/{action}"
@using MoodProject.Core.Ports.In
@using MoodProject.App.Services

@inject IUsersService UsersService
@inject IConfiguration Configuration
@inject IApiAuthService ApiAuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CacheService CacheService

@inherits IdentityHelper

<IdentityHelper />
<RemoteAuthenticatorView Action="@Action">
    <LogOut>
        @{
            var authority = (string)Configuration["Auth0:Authority"];
            var clientId = (string)Configuration["Auth0:ClientId"];

            Navigation.NavigateTo($"{authority}/v2/logout?client_id={clientId}");
        }
    </LogOut>
    <CompletingLoggingIn>
        <AuthorizeView>
            <Authorized>
                @{
                    
                }
            </Authorized>
        </AuthorizeView>
    </CompletingLoggingIn>
</RemoteAuthenticatorView>

@code{
    [Parameter]
    public string Action { get; set; }
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationStateTask { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        await AuthenticationStateTask;
        if (Action.Equals("login-callback") && await IsAuthenticated())
        {
            var hasAcceptedGdpr = await UsersService.GetGdprConsent(await GetUserId());
            await CacheService.GetApiToken(await GetUserId(), true);
            Navigation.NavigateTo(!hasAcceptedGdpr ? "/gdpr" : "/profile");
        }
    }
}